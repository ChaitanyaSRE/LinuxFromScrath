I. Basic Navigation and File Management

pwd: Print Working Directory. Shows the current directory you are in.

Use Case: Quickly determine your location in the file system.
cd: Change Directory. Navigates to a different directory.

cd /path/to/directory (absolute path)
cd directory_name (relative path)
cd .. (move up one directory)
cd ~ (go to your home directory)
Use Case: Moving around the file system.
ls: List Directory Contents. Displays files and directories in the current directory (or a specified directory).

ls -l: Long listing format (permissions, size, owner, etc.)
ls -a: Show all files, including hidden files (starting with .)
ls -t: Sort by modification time (newest first)
ls -r: Reverse the order of listing
ls -h: Human-readable file sizes (e.g., KB, MB, GB)
ls -la: Show all files with long listing format
Use Case: Inspecting the contents of directories.
mkdir: Make Directory. Creates a new directory.

mkdir directory_name
mkdir -p /path/to/nested/directory (create parent directories if they don't exist)
Use Case: Creating new directories to organize files.
rmdir: Remove Directory. Deletes an empty directory.

rmdir directory_name
Use Case: Removing empty directories.
touch: Create an empty file or update the timestamp of an existing file.

touch file_name
Use Case: Creating new, empty files or updating the modification time of a file.
cp: Copy. Copies files or directories.

cp source_file destination_file
cp -r source_directory destination_directory (recursive copy for directories)
Use Case: Creating copies of files or directories.
mv: Move or Rename. Moves files or directories, or renames them.

mv source_file destination_file (rename)
mv source_file destination_directory (move)
Use Case: Renaming files or moving them to different locations.
rm: Remove. Deletes files or directories. Use with caution!

rm file_name
rm -r directory_name (recursive removal for directories)
rm -f file_name (force removal, bypass prompts)
rm -rf directory_name (force recursive removal) Extremely dangerous if used incorrectly!
Use Case: Deleting files and directories.
cat: Concatenate and display file contents. Quickly view the contents of a file.

cat file_name
Use Case: Displaying the contents of a small text file.
less: View file contents one page at a time. More advanced than cat for larger files.

less file_name
(Use arrow keys to navigate, q to quit)
Use Case: Viewing large text files.
head: Display the first few lines of a file.

head file_name (default: first 10 lines)
head -n 20 file_name (first 20 lines)
Use Case: Quickly checking the beginning of a log file.
tail: Display the last few lines of a file. Very useful for monitoring log files.

tail file_name (default: last 10 lines)
tail -n 20 file_name (last 20 lines)
tail -f file_name (follow the file; display new lines as they are added)
Use Case: Monitoring log files in real-time.
find: Search for files and directories. A powerful tool for locating files based on various criteria.

find . -name "file_name" (search for a file named "file_name" in the current directory and its subdirectories)
find / -name "file_name" (search the entire file system)
find . -type f (find all files)
find . -type d (find all directories)
find . -size +10M (find files larger than 10MB)
find . -mtime -7 (find files modified in the last 7 days)
find . -name "*.log" -exec rm {} \; (find all .log files and delete them - use with extreme caution!)
Use Case: Locating specific files, finding large files, cleaning up old files.
du: Disk Usage. Shows the disk space used by files and directories.

du -h (human-readable format)
du -sh (summary of the current directory)
du -sh /path/to/directory (summary of a specific directory)
du -ah (show disk usage of all files and directories)
Use Case: Identifying directories that are consuming a lot of disk space.
df: Disk Free. Shows the available disk space on file systems.

df -h (human-readable format)
Use Case: Monitoring disk space usage.
ln: Create Links. Creates hard links or symbolic links (symlinks).

ln source_file link_name (hard link)
ln -s source_file link_name (symbolic link)
Use Case: Creating shortcuts to files or directories. Symlinks are more common.
II. User and Group Management

whoami: Display the current user's username.

Use Case: Confirming which user you are logged in as.
id: Display user and group information.

Use Case: Checking a user's UID, GID, and group memberships.
sudo: Execute a command as the superuser (root). Requires the user to be in the sudoers file.

sudo command
Use Case: Performing administrative tasks that require root privileges.
su: Switch User. Switch to another user account.

su username
Use Case: Switching to a different user account.
useradd: Add a new user. Requires root privileges.

sudo useradd username
sudo useradd -m username (create home directory)
Use Case: Creating new user accounts.
passwd: Change a user's password.

passwd (change your own password)
sudo passwd username (change another user's password)
Use Case: Setting or changing user passwords.
userdel: Delete a user. Requires root privileges.

sudo userdel username
sudo userdel -r username (remove home directory as well)
Use Case: Deleting user accounts.
groupadd: Add a new group. Requires root privileges.

sudo groupadd groupname
Use Case: Creating new groups.
groupdel: Delete a group. Requires root privileges.

sudo groupdel groupname
Use Case: Deleting groups.
usermod: Modify a user account. Requires root privileges.

sudo usermod -aG groupname username (add user to a group)
sudo usermod -g new_primary_group username (change primary group)
Use Case: Modifying user account properties, such as group memberships.
chown: Change Owner. Changes the owner of a file or directory. Requires root privileges to change ownership to a user other than yourself.

sudo chown username file_name
sudo chown username:groupname file_name (change owner and group)
sudo chown -R username:groupname directory_name (recursive change)
Use Case: Changing file ownership.
chgrp: Change Group. Changes the group ownership of a file or directory.

sudo chgrp groupname file_name
sudo chgrp -R groupname directory_name (recursive change)
Use Case: Changing file group ownership.
chmod: Change Mode (Permissions). Changes the permissions of a file or directory.

chmod 755 file_name (rwxr-xr-x)
chmod 644 file_name (rw-r--r--)
chmod +x file_name (add execute permission)
chmod -x file_name (remove execute permission)
chmod u+w file_name (add write permission for the owner)
chmod g+r file_name (add read permission for the group)
chmod o-r file_name (remove read permission for others)
chmod -R 755 directory_name (recursive change)
Use Case: Setting file permissions to control access.
III. Process Management

ps: Process Status. Displays information about running processes.

ps aux (show all processes, including those owned by other users)
ps -ef (another common way to show all processes)
ps -u username (show processes owned by a specific user)
Use Case: Listing running processes.
top: Display a dynamic real-time view of running processes. Shows CPU and memory usage.

Use Case: Monitoring system resource usage and identifying resource-intensive processes.
htop: An interactive process viewer (requires installation). More user-friendly than top.

Use Case: Similar to top, but with a more visual and interactive interface.
kill: Send a signal to a process. Often used to terminate a process.

kill process_id (send TERM signal, graceful termination)
kill -9 process_id (send KILL signal, immediate termination - use as a last resort)
Use Case: Terminating unresponsive or problematic processes.
pkill: Kill processes by name.

pkill process_name
Use Case: Terminating processes based on their name.
killall: Kill processes by name (similar to pkill).

killall process_name
Use Case: Terminating processes based on their name.
bg: Move a process to the background.

Use Case: Running a long-running command in the background so you can continue using the terminal.
fg: Move a process to the foreground.

Use Case: Bringing a background process back to the foreground.
jobs: List background jobs.

Use Case: Checking the status of background processes.
nohup: Run a command immune to hangups, with output to a non-tty. Useful for running processes that should continue even after you disconnect from the terminal.

nohup command &
Use Case: Running long-running processes that need to continue even after you log out.
systemctl: Control the systemd system and service manager. Used to manage system services.

sudo systemctl start service_name (start a service)
sudo systemctl stop service_name (stop a service)
sudo systemctl restart service_name (restart a service)
sudo systemctl status service_name (check the status of a service)
sudo systemctl enable service_name (enable a service to start on boot)
sudo systemctl disable service_name (disable a service from starting on boot)
Use Case: Managing system services (e.g., web servers, databases).
IV. Networking

ip: Show or manipulate routing, devices, policy routing and tunnels. A modern replacement for ifconfig and route.

ip addr show (show network interfaces and their IP addresses)
ip route show (show the routing table)
ip link show (show network interfaces)
Use Case: Configuring and troubleshooting network interfaces.
ifconfig: Configure a network interface (deprecated, but still commonly used).

ifconfig (show network interfaces and their IP addresses)
ifconfig eth0 up (bring up the eth0 interface)
ifconfig eth0 down (bring down the eth0 interface)
Use Case: Configuring and troubleshooting network interfaces (though ip is preferred).
ping: Test network connectivity.

ping hostname or ping ip_address
Use Case: Checking if a host is reachable.
netstat: Display network connections, routing tables, interface statistics, masquerade connections, and multicast memberships (deprecated, ss is preferred).

netstat -tulnp (show listening TCP and UDP ports)
Use Case: Troubleshooting network connectivity and identifying listening ports.
ss: Socket Statistics. A modern replacement for netstat.

ss -tulnp (show listening TCP and UDP ports)
Use Case: Troubleshooting network connectivity and identifying listening ports.
traceroute: Trace the route packets take to a network host.

traceroute hostname or traceroute ip_address
Use Case: Identifying network bottlenecks or connectivity issues.
nslookup: Query Internet name servers.

nslookup hostname
Use Case: Looking up the IP address of a domain name.
dig: DNS lookup utility (more powerful than nslookup).

dig hostname
Use Case: Performing DNS queries and troubleshooting DNS issues.
ssh: Secure Shell. Connect to a remote server securely.

ssh username@hostname
ssh -p port username@hostname (connect to a non-standard port)
Use Case: Remotely accessing and managing servers.
scp: Secure Copy. Securely copy files between hosts.

scp source_file username@hostname:destination_directory (copy from local to remote)
scp username@hostname:source_file destination_directory (copy from remote to local)
Use Case: Securely transferring files between servers.
wget: Download files from the web.

wget URL
Use Case: Downloading files from the internet.
curl: Transfer data from or to a server. A versatile tool for making HTTP requests.

curl URL (display the content of a web page)
curl -I URL (get the HTTP headers)
curl -O URL (download the file)
Use Case: Downloading files, testing APIs, and making HTTP requests.
firewall-cmd (or ufw on Ubuntu): Manage the firewall (firewalld or UFW).

sudo firewall-cmd --zone=public --add-port=80/tcp --permanent (open port 80)
sudo firewall-cmd --reload (reload the firewall configuration)
sudo ufw allow 80 (UFW equivalent)
Use Case: Configuring the firewall to allow or block network traffic.
V. Package Management

apt (Debian/Ubuntu): Advanced Package Tool. Used to manage software packages.

sudo apt update (update the package lists)
sudo apt upgrade (upgrade installed packages)
sudo apt install package_name (install a package)
sudo apt remove package_name (remove a package)
sudo apt purge package_name (remove a package and its configuration files)
apt search package_name (search for a package)
Use Case: Installing, updating, and removing software packages.
yum (Red Hat/CentOS/Fedora - older systems): Yellowdog Updater, Modified. Used to manage software packages.

sudo yum update (update installed packages)
sudo yum install package_name (install a package)
sudo yum remove package_name (remove a package)
yum search package_name (search for a package)
Use Case: Installing, updating, and removing software packages.
dnf (Red Hat/CentOS/Fedora - newer systems): Dandified Yum. The successor to yum.

sudo dnf update (update installed packages)
sudo dnf install package_name (install a package)
sudo dnf remove package_name (remove a package)
dnf search package_name (search for a package)
Use Case: Installing, updating, and removing software packages.
rpm (Red Hat Package Manager): Used to install, query, verify, update, and erase individual software packages. Often used for installing packages downloaded manually.

sudo rpm -i package_name.rpm (install a package)
sudo rpm -U package_name.rpm (upgrade a package)
rpm -q package_name (query if a package is installed)
Use Case: Installing, updating, and querying individual RPM packages.
snap (Universal package manager): Works across many distributions.

sudo snap install package_name
sudo snap remove package_name
sudo snap refresh package_name
Use Case: Installing and managing snap packages.
VI. Text Processing and Scripting

grep: Global Regular Expression Print. Searches for patterns in files.

grep "pattern" file_name
grep -i "pattern" file_name (case-insensitive search)
grep -r "pattern" directory_name (recursive search)
grep -v "pattern" file_name (show lines that don't match the pattern)
grep -n "pattern" file_name (show line numbers)
Use Case: Searching for specific text in files, filtering log files.
sed: Stream Editor. A powerful tool for text manipulation.

sed 's/old_text/new_text/g' file_name (replace all occurrences of "old_text" with "new_text")
sed '/pattern/d' file_name (delete lines matching the pattern)
sed -i 's/old_text/new_text/g' file_name (edit the file in place)
Use Case: Replacing text in files, deleting lines, performing complex text transformations.
awk: Pattern scanning and processing language. Another powerful tool for text manipulation and data extraction.

awk '{print $1}' file_name (print the first field of each line)
awk -F',' '{print $2}' file_name

(use comma as a field separator and print the second field)
awk '/pattern/ {print $0}' file_name (print lines matching the pattern)
Use Case: Extracting data from files, performing calculations on data, generating reports.
wc: Word Count. Counts the number of lines, words, and characters in a file.

wc file_name
wc -l file_name (count lines)
wc -w file_name (count words)
wc -c file_name (count bytes)
Use Case: Counting the number of lines in a log file, determining the size of a file.
sort: Sort lines of text files.

sort file_name
sort -n file_name (numeric sort)
sort -r file_name (reverse sort)
Use Case: Sorting data in files.
uniq: Report or omit repeated lines. Often used in conjunction with sort.

sort file_name | uniq (remove duplicate lines)
sort file_name | uniq -c (count the number of occurrences of each line)
Use Case: Removing duplicate entries from a file, counting the frequency of items.
cut: Remove sections from each line of files.

cut -d',' -f1 file_name

(cut the first field, using comma as a delimiter)
Use Case: Extracting specific columns from a file.
tr: Translate or delete characters.

tr '[:lower:]' '[:upper:]' < file_name (convert lowercase to uppercase)
tr -d '[:space:]' < file_name (delete all spaces)
Use Case: Converting text to uppercase or lowercase, removing unwanted characters.
echo: Display a line of text. Often used in scripts.

echo "Hello, world!"

echo $VARIABLE (display the value of a variable)
Use Case: Displaying messages, printing variable values.
printf: Formatted output. More powerful than echo for creating formatted output.

printf "The value is: %s\n" $VARIABLE
Use Case: Creating formatted output in scripts.
xargs: Build and execute command lines from standard input. Useful for processing lists of files.

find . -name "*.txt" | xargs rm (find all .txt files and delete them - use with caution!)
Use Case: Performing actions on a list of files generated by another command.
bash (or sh, zsh): The shell interpreter. Used to execute shell scripts.

bash script_name.sh
Use Case: Running shell scripts to automate tasks.
nano, vim, emacs: Text editors. Used to create and edit files.

Use Case: Creating and modifying configuration files, scripts, and other text-based files.
VII. System Information and Monitoring

uname: Print system information.

uname -a (show all system information)
uname -r (show kernel release)
uname -m (show machine architecture)
Use Case: Determining the operating system and kernel version.
uptime: Show how long the system has been running.

Use Case: Checking system uptime and load average.
w: Show who is logged on and what they are doing.

Use Case: Checking who is currently logged in to the system.
last: Show a listing of last logged in users.

Use Case: Auditing user logins.
free: Display the amount of free and used memory in the system.

free -m (show memory in MB)
free -g (show memory in GB)
Use Case: Monitoring memory usage.
vmstat: Report virtual memory statistics.

Use Case: Monitoring virtual memory usage and system performance.
iostat: Report CPU utilization and disk I/O statistics.

Use Case: Monitoring CPU and disk I/O performance.
lscpu: Display information about the CPU architecture.

Use Case: Determining CPU information.
lspci: List PCI devices.

Use Case: Identifying hardware devices connected to the PCI bus.
lsusb: List USB devices.

Use Case: Identifying USB devices connected to the system.
dmesg: Display kernel messages. Useful for troubleshooting hardware issues.

Use Case: Troubleshooting hardware and driver problems.
journalctl: Query the systemd journal (system logs). A modern replacement for traditional log files.

journalctl (show all log messages)
journalctl -u service_name (show log messages for a specific service)
journalctl -f (follow the log in real-time)
journalctl -b (show log messages from the current boot)
Use Case: Troubleshooting system problems and monitoring service logs.
date: Display or set the system date and time.

date (display the current date and time)
sudo date -s "YYYY-MM-DD HH:MM:SS" (set the date and time)
Use Case: Checking and setting the system date and time.
timedatectl: Control the system time and date. A modern tool for managing time synchronization.

sudo timedatectl set-timezone America/Los_Angeles (set the timezone)
sudo timedatectl set-ntp true (enable NTP synchronization)
Use Case: Configuring the timezone and enabling NTP synchronization.
VIII. Archiving and Compression

tar: Tape Archive. Used to create archives of files and directories.

tar -cvf archive_name.tar directory_name (create an archive)
tar -xvf archive_name.tar (extract an archive)
tar -tvf archive_name.tar (list the contents of an archive)
tar -czvf archive_name.tar.gz directory_name (create a compressed archive using gzip)
tar -xzvf archive_name.tar.gz (extract a compressed archive using gzip)
tar -cjvf archive_name.tar.bz2 directory_name (create a compressed archive using bzip2)
tar -xjvf archive_name.tar.bz2 (extract a compressed archive using bzip2)
Use Case: Creating backups of files and directories, archiving data.
gzip: GNU zip. Compresses files.

gzip file_name (compress a file)
gzip -d file_name.gz (decompress a file)
Use Case: Compressing files to save disk space.
gunzip: GNU uncompress. Decompresses files compressed with gzip.

gunzip file_name.gz
Use Case: Decompressing files.
bzip2: A higher-compression alternative to gzip.

bzip2 file_name (compress a file)
bzip2 -d file_name.bz2 (decompress a file)
Use Case: Compressing files with higher compression.
bunzip2: Decompresses files compressed with bzip2.

bunzip2 file_name.bz2
Use Case: Decompressing files.
zip: Package and compress (archive) files.

zip archive_name.zip file1 file2 directory_name
Use Case: Creating zip archives.
unzip: Extract compressed files in a ZIP archive.

unzip archive_name.zip
Use Case: Extracting zip archives.
IX. Other Useful Commands

history: Display command history.

history
history | grep "command" (search history for a specific command)
!n (execute the nth command in history)
!! (execute the last command)
Use Case: Recalling previously used commands.
alias: Create a shortcut for a command.

alias la='ls -la' (create an alias la for ls -la)
Use Case: Creating shortcuts for frequently used commands.
unalias: Remove an alias.

unalias la
Use Case: Removing aliases.
screen or tmux: Terminal multiplexers. Allow you to create multiple terminal sessions within a single window, and to detach and reattach to sessions.

Use Case: Running multiple commands simultaneously, keeping processes running even after disconnecting from the terminal.
watch: Execute a program periodically, showing output fullscreen.

watch -n 1 df -h (run df -h every 1 second)
Use Case: Monitoring system resources or other changing information in real-time.
tee: Read from standard input and write to standard output and files.

command | tee file_name (display the output of command and save it to file_name)
Use Case: Saving the output of a command to a file while also displaying it on the screen.
bc: Arbitrary precision calculator language.

bc (enter interactive mode)
echo "scale=2; 10/3" | bc (calculate 10/3 with 2 decimal places)
Use Case: Performing calculations from the command line.
man: Display the manual page for a command.

man command_name
Use Case: Learning about a command and its options.
help: Display help information for a command (often built-in shell commands).

help command_name
Use Case: Getting help with shell commands.
Important Considerations:

Security: Be extremely careful when using commands like rm -rf, chown, chmod, and userdel. Incorrect usage can lead to data loss or system instability.
Root Privileges: Many administrative commands require root privileges. Use sudo when necessary.
Practice: The best way to learn these commands is to practice using them in a safe environment (e.g., a virtual machine).
Documentation: Refer to the man pages for detailed information about each command.
Tab Completion: Use tab completion to speed up typing and avoid errors.
Shell Scripting: Learn basic shell scripting to automate repetitive tasks.
Distribution-Specific Tools: Be aware of distribution-specific tools and utilities.
